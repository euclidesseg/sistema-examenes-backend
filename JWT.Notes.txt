... JWT
#   (JSON Web Token) es un estándar abierto (RFC 7519) que define un formato compacto y autenticado
#   para la transmisión segura de información entre partes como un objeto JSON. 

... Esta definido por 3 partes

*   Header 
... Definido por nosotros podemos elegir el tipo de algoritmo usado para codificar en base 64
#   {
#      "alg": "HS256",  
#      "typ": "JWT"
#   }


*   Pyload
... Datos enviados en la peticion
#   {
#       "sub": "1234567890",
#       "name": "John Doe",
#       "iat": 1516239022
#   }

*   Verify Signature  Firma de verificación
... Contiene el header y el pyload convertidos a base 64 y concatenados   
... tambien contiene la clave secreta que es definida por el desarrollador
#   HMACSHA256(
#     base64UrlEncode(header) + "." + base64UrlEncode(payload), my-clave-en-256-bits
#   ) secret base64 encoded

*   Como se Genera la firma?
... Primero se convierte el header y pyload en base 64 y se concatenean separados por .
... Luego, la clave my-clave-en-256-bits es convertida en una matriz de bits con UTF-8
... Luego,  se inicializa el objeto que generará la firma, este objeto se crea con el algoritmo y se instancia con la clave secreta
... Ejemplo 
!   Mac mac = Mac.getInstance("HmacSHA256");
!   mac.init(secretKey);
#   Nota: HmacSHA256 se refiere al tipo de algoritmo
... Luego, se genera la firma usando el objeto que se creo anteriormente con nuestra clave secreta 
... ejemplo base64String = objetoConfirma(header-y-pyload.getBytes("UTF-8"))
... Po ultimo esta firma generada se codifica en base 64

!   Nota:
... En el estándar JWT, cuando se especifica "HS256" en el campo "alg" (algoritmo) del encabezado del token,
... se está indicando que se debe utilizar HMAC con SHA-256 (HmacSHA256) para generar la firma del JWT.




! DEPENDENCIAS NECESARIAS PRA TRABAJAR CON JWT EN JAVA

**<dependency>
**    <groupId>javax.xml.bind</groupId>
**    <artifactId>jaxb-api</artifactId>
**    <version>2.3.1</version>
**</dependency>
? // Esta dependencia proporciona las clases e interfaces básicas para la API de Java Architecture for XML Binding (JAXB),
? que permite la conversión de objetos Java a XML y viceversa.
**
**<dependency>
**    <groupId>org.springframework.boot</groupId>
**    <artifactId>spring-boot-starter-security</artifactId>
**</dependency>
? // Este starter de Spring Boot proporciona configuraciones y dependencias para agregar seguridad a una aplicación Spring Boot. 
? Incluye funcionalidades como autenticación, autorización, cifrado, entre otros.
**
**<dependency>
**    <groupId>org.springframework.security</groupId>
**    <artifactId>spring-security-test</artifactId>
**    <scope>test</scope>
**</dependency>
? // Esta dependencia proporciona utilidades de prueba para aplicaciones que utilizan Spring Security.
? Ayuda a escribir pruebas de integración y unidad para la seguridad de Spring.
**
**<dependency>
**    <groupId>io.jsonwebtoken</groupId>
**    <artifactId>jjwt</artifactId>
**    <version>0.9.1</version>
**</dependency>
? // Esta dependencia agrega la biblioteca Java JWT (JSON Web Token) a la aplicación. Permite trabajar con tokens JWT para autenticación
? // y autorización en aplicaciones web y servicios RESTful.
